#!/usr/bin/python

import os
import socket
from subprocess import list2cmdline, Popen, PIPE
import sys

try:
    from subprocess import check_call
except ImportError:
    from subprocess import call

    # rips from python 2.7 subprocess.py
    class CalledProcessError(Exception):
        def __init__(self, returncode, cmd, output=None):
            self.returncode = returncode
            self.cmd = cmd
            self.output = output
        def __str__(self):
            return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

    def check_call(*popenargs, **kwargs):
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return 0

VerboseRun = False

def run(cmd):
    if VerboseRun:
        host = socket.gethostname()
        path = os.getcwd()
        print host + ':' + path, '+', list2cmdline(cmd)
    check_call(cmd)

def repo_command_runner(f):
    def wrapper(self, *args):
        cmd = f(self, *args)

        if self.islocal():
            oldcwd = os.getcwd()
            os.chdir(self.path)
            run(cmd)
            os.chdir(oldcwd)

        else:
            cmd = list2cmdline(cmd).replace("'", "\\'")
            cmd = list2cmdline(['cd', self.path]) + ' && ' + cmd
            cmd = "'" + cmd.replace("'", "\\'") + "'"
            cmd = ['ssh', self.host, '--', 'bash', '-c', cmd]
            run(cmd)
    return wrapper

# from collections import namedtuple
from operator import itemgetter
class repo(tuple): # namedtuple('repo', 'host path')
    def __new__(cls, host, path):
        return tuple.__new__(cls, (host, path))

    host = property(itemgetter(0))
    path = property(itemgetter(1))

    @classmethod
    def parse(cls, s):
        try:
            host, path = s.split(':', 1)
        except ValueError:
            host = None
            path = s
        return cls(host, path)

    def islocal(self):
        return \
            self.host is None or \
            self.host == socket.gethostname() or \
            self.host == socket.getfqdn()

    def relativize_repos(self, repos):
        for r in repos:
            if r.host is None and self.host is not None:
                # TODO: option for fqdn instead
                yield socket.gethostname() + ':' + r.path
            elif r.host == self.host:
                yield r.path
            else:
                yield str(r)

    @repo_command_runner
    def add_repos(self, remote, *repos):
        cmd = ['git', 'clique']
        if VerboseRun: cmd.append('--verbose')
        cmd += ['add', '--change-only', remote]
        cmd.extend(self.relativize_repos(repos))
        return cmd

    @repo_command_runner
    def remove_repos(self, remote, *repos):
        cmd = ['git', 'clique']
        if VerboseRun: cmd.append('--verbose')
        cmd += ['rm', '--change-only', remote]
        cmd.extend(self.relativize_repos(repos))
        return cmd

    @repo_command_runner
    def remove_remote(self, remote):
        return ['git', 'remote', 'rm', remote]

    def __str__(self):
        if self.host is None:
            return self.path
        else:
            return self.host + ':' + self.path

def get_remote_urls(remote):
    p = Popen(
        ('git', 'config',  '--get-all', 'remote.' + remote + '.url'),
        stdout=PIPE)
    # if p.wait() != 0: return None
    for line in p.stdout:
        line = line.strip()
        if line: yield line

p = Popen(('git', 'rev-parse', '--show-toplevel'), stdout=PIPE)
if p.wait() != 0:
    raise RuntimeError(
        'git rev-parse --show-toplevel exited non-zero: %d' % p.returncode)
thispath = p.stdout.readline().strip()
thispath = os.path.realpath(thispath)
if thispath.endswith('/.git'):
    thispath = thispath[:-5]

import optparse
parser = optparse.OptionParser(
    usage='%prog add|rm <remote> <url> [<url> [...]]')
parser.add_option('-v', '--verbose',
    help='Print verbose output (command run)',
    dest='verbose', action='store_true', default=False)
parser.add_option('--change-only',
    help='Only make changes to the local repository;'
         ' don\'t propagate changes to other repositories.',
    dest='changeonly', action='store_true', default=False)
parser.add_option('--not-this',
    help='Don\'t include this repository when propagating to other'
         ' repositories; useful for repositories external to the clique.',
    dest='notthis', action='store_true', default=False)
opts, args = parser.parse_args()
if not len(args): parser.error('missing action')
action = args.pop(0)
if not len(args): parser.error('missing remote')
remote = args.pop(0)
if not len(args): parser.error('missing urls')

if opts.verbose:
    VerboseRun = True

changed = set()
repos = set(repo.parse(url) for url in get_remote_urls(remote))

if action == 'add':
    def change(r):
        if r not in repos:
            if not repos:
                run(('git', 'remote', 'add', remote, str(r)))
            else:
                run(('git', 'remote', 'set-url', '--add', remote, str(r)))
            repos.add(r)
            return True

    if opts.notthis:
        def change_changee(r):
            r.add_repos(remote, *repos)
    else:
        def change_changee(r):
            if r.islocal():
                thisurl = thispath
            else:
                thisurl = thisfqdn + ':' + thispath
                thisurl = socket.getfqdn() + ':' + thispath
            r.add_repos(remote, thisurl, *repos)

    def propagate(r):
        r.add_repos(remote, *changed)

elif action == 'rm':
    def change(r):
        if r in repos:
            run(('git', 'remote', 'set-url', '--delete', remote, str(r)))
            repos.remove(r)
            return True

    def change_changee(r):
        r.remove_remote(remote)

    def propagate(r):
        r.remove_repos(remote, *changed)

else:
    print >>sys.stderr, "Invaild action", repr(action)
    sys.exit(1)

for url in args:
    r = repo.parse(url)
    if r.islocal() and os.path.realpath(r.path) == thispath: continue
    if change(r):
        changed.add(r)

if not changed or opts.changeonly: sys.exit(0)

for r in changed:
    change_changee(r)

for r in repos - changed:
    propagate(r)
