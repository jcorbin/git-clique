#!/usr/bin/python

from collections import namedtuple
from functools import partial
from itertools import groupby, product
from operator import itemgetter
from subprocess import CalledProcessError, list2cmdline, PIPE
import errno
import os
import signal
import socket
import subprocess
import sys
import threading

VerboseRun = False

def shunt_pipe(pfx, f):
    for line in f:
        line = line.rstrip('\r\n')
        print pfx, line
        sys.stdout.flush()
    f.close()

def shunt_pipe_thread(pfx, f):
    t = threading.Thread(target=shunt_pipe, args=(pfx, f))
    t.start()
    return t

class Popen(subprocess.Popen):
    Dangling = {}
    Processes = {}

    @classmethod
    def handle_sigchld(cls, signum, frame):
        try:
            while True:
                pid, status = os.waitpid(-1, os.WNOHANG)
                if pid == 0: break
                try:
                    self = cls.Processes.pop(pid)
                except KeyError:
                    cls.Dangling[pid] = status
                    continue
                self._handle_exitstatus(status)
        except OSError as err:
            if err.errno != errno.ECHILD: raise

    def __init__(self, cmd, **kwargs):
        self.onexit = kwargs.pop('onexit', None)
        self._ininit = True
        super(Popen, self).__init__(cmd, **kwargs)
        if self.returncode is not None and self.onexit: self.onexit(self)
        self._ininit = False

    def _execute_child(self, *args):
        super(Popen, self)._execute_child(*args)
        self.Processes[self.pid] = self
        try:
            status = self.Dangling.pop(self.pid)
        except KeyError:
            pass
        else:
            self._handle_exitstatus(status)

    def _handle_exitstatus(self, status):
        super(Popen, self)._handle_exitstatus(status)
        if self.onexit and not self._ininit: self.onexit(self)

    def wait(self):
        while self.returncode is None:
            signal.pause()
        return self.returncode

signal.signal(signal.SIGCHLD, Popen.handle_sigchld)

def run(cmd, wait=True, ok_retcodes=(0,), **kwargs):
    verbose = kwargs.pop('verbose', VerboseRun)
    if isinstance(cmd, unicode):
        cmd = cmd.encode('ascii')
    if isinstance(cmd, str):
        cmdstr = cmd
        cmd = shlex.split(cmd)
    else:
        cmdstr = list2cmdline(cmd)
    if verbose:
        host = socket.gethostname()
        path = kwargs.get('cwd', os.getcwd())
        print host + ':' + path, '+', list2cmdline(cmd)
        sys.stdout.flush()
    if kwargs.get('shell'):
        cmd = cmdstr
    p = Popen(cmd, **kwargs)
    p.cmdstr = cmdstr
    p.cmd = cmd
    if wait: wait_check(p, ok_retcodes)
    return p

def wait_check(proc, ok_retcodes=(0,)):
    retcode = proc.wait()
    if retcode not in ok_retcodes:
        raise CalledProcessError(retcode, proc.cmdstr)
    return proc

def prun_repo_cmds(repo_cmd_kwargs):
    procs = [
        (repo, cmd, repo.runcmd(
            cmd, stdout=PIPE, stderr=PIPE,
            verbose=False, wait=False, **kwargs))
        for repo, cmd, kwargs in repo_cmd_kwargs]
    all_ok = True
    for i, (repo, cmd, p) in enumerate(procs):
        if i > 0: print
        print repo, '$', list2cmdline(cmd)
        sys.stdout.flush()
        ts = [
            shunt_pipe_thread('  out>', p.stdout),
            shunt_pipe_thread('  err>', p.stderr)]
        retcode = p.wait()
        for t in ts:
            t.join()
        if retcode != 0:
            print '  exited non-zero:', retcode
            sys.stdout.flush()
            all_ok = False
    return 0 if all_ok else 1

class repo(namedtuple('repo', 'host path')):
    def __new__(cls, host, path):
        if host in (socket.gethostname(), socket.getfqdn()):
            host = None
        self = super(repo, cls).__new__(cls, host, path)
        self._remote_repos_cache = {}
        return self

    def runcmd(self, cmd, **kwargs):
        if self.islocal():
            proc = run(cmd, cwd=self.path, **kwargs)

        else:
            kwargs['shell'] = False
            cmd = list2cmdline(cmd).replace("'", "\\'")
            cmd = list2cmdline(['cd', self.path]) + ' && ' + cmd
            cmd = "'" + cmd.replace("'", "\\'") + "'"
            cmd = ['ssh', self.host, '--', 'bash', '-c', cmd]
            proc = run(cmd, **kwargs)

        return proc

    @classmethod
    def parse(cls, s):
        try:
            host, path = s.split(':', 1)
        except ValueError:
            host = None
            path = s
        return cls(host, path)

    def islocal(self):
        return self.host is None

    def relativize_repos(self, repos):
        for r in repos:
            yield self.relativize_repo(r)

    def relativize_repo(self, r):
        if r.host is None and self.host is not None:
            # TODO: option for fqdn instead
            return socket.gethostname() + ':' + r.path
        elif r.host == self.host:
            return r.path
        else:
            return str(r)

    def add_repos(self, remote, *repos):
        ret = [] # TODO: nonlocal in py3k
        self.async_add_repos(remote, repos, ret.append)
        while not ret: signal.pause()
        return ret[0]

    def async_add_repos(self, remote, repos, cb):
        current_repos = self.remote_repos(remote)
        # TODO: worth it to use a set?
        added = tuple(r for r in repos
            if r not in current_repos and r != self)
        if not added:
            cb(added)
            return
        c1 = None
        if not current_repos:
            c1 = ['git', 'remote', 'add', remote,
                  self.relativize_repo(added[0])]
            rs = added[1:]
        else:
            rs = added

        c2 = None
        if len(rs) == 1:
            c2 = ['git', 'remote', 'set-url', remote, '--add',
                  self.relativize_repo(rs[0])]
        elif rs:
            c2 = ['xargs', '-0', '-n1',
                  'git', 'remote', 'set-url', remote, '--add']

        kwargs = {}
        if c1 and c2:
            cmd = c1 + ['&&'] + c2
            kwargs['shell'] = True
        elif c1: cmd = c1
        elif c2: cmd = c2
        else:
            cb(added)
            return
        if len(rs) > 1:
            kwargs['stdin'] = PIPE
        def cmd_done(p):
            self._remote_repos_cache[remote] = current_repos + added
            cb(added)
        p = self.runcmd(cmd, wait=False, onexit=cmd_done, **kwargs)
        if len(rs) > 1:
            p.stdin.write('\0'.join(self.relativize_repos(rs)))
            p.stdin.close()

    def remove_repos(self, remote, *repos):
        ret = [] # TODO: nonlocal in py3k
        self.async_remove_repos(remote, repos, ret.append)
        while not ret: signal.pause()
        return ret[0]

    def async_remove_repos(self, remote, repos, cb):
        current_repos = self.remote_repos(remote)
        # TODO: worth it to use a set?
        removed = tuple(r for r in repos if r in current_repos)
        if not removed:
            return removed
        current_repos = tuple(r for r in current_repos if r not in removed)

        def cmd_done(_):
            print _.cmdstr, 'done'
            sys.stdout.flush()
            self._remote_repos_cache[remote] = current_repos
            cb(removed)
        if not current_repos:
            self.runcmd(('git', 'remote', 'remove', remote),
                        wait=False, onexit=cmd_done)
        elif len(removed) == 1:
            self.runcmd((
                'git', 'remote', 'set-url', remote, '--delete',
                self.relativize_repo(removed[0])
            ), wait=False, onexit=cmd_done)
        else:
            p = self.runcmd((
                'xargs', '-0', '-n1',
                'git', 'remote', 'set-url', remote, '--delete'
            ), stdin=PIPE, wait=False, onexit=cmd_done)
            p.stdin.write('\0'.join(self.relativize_repos(removed)))
            p.stdin.close()

    def remove_remote(self, remote):
        self.runcmd(('git', 'remote', 'rm', remote))

    def async_remove_remote(self, remote, cb):
        self.runcmd(('git', 'remote', 'rm', remote), wait=False, onexit=lambda _: cb(self))

    def remote_repos(self, remote):
        try:
            return self._remote_repos_cache[remote]
        except KeyError:
            pass
        ret = [] # NOTE: nonlocal in py3k
        self.get_remote_repos(remote, ret.append)
        while not ret: signal.pause()
        return ret[0]

    def get_remote_repos(self, remote, cb):
        try:
            repos = self._remote_repos_cache[remote]
        except KeyError:
            pass
        else:
            cb(repos)
            return
        def cmd_done(urls):
            self._remote_repos_cache[remote] = repos = tuple(
                self.parse(line.rstrip('\r\n'))
                for line in urls.stdout)
            cb(repos)
        self.runcmd((
            'git', 'config',  '--get-all', 'remote.' + remote + '.url'
        ), stdout=PIPE, wait=False, onexit=cmd_done)

    def __str__(self):
        if self.host is None:
            return self.path
        else:
            return self.host + ':' + self.path

class Command(object):
    @classmethod
    def add_subparser(cls, subparsers):
        name = cls.__name__
        if name.endswith('Command'): name = name[:-7]
        name = name.lower()
        subparser = subparsers.add_parser(name)
        subparser.set_defaults(cmd=cls)
        subparser.add_argument('remote', metavar='<name>',
            help='name of the clique remote')
        return subparser

    def __init__(self, args):
        self.args = args
        self.remote = args.remote

    @property
    def repo(self):
        try:
            return self._repo
        except AttributeError:
            pass

        p = Popen(('git', 'rev-parse', '--show-toplevel'), stdout=PIPE)
        if p.wait() != 0:
            raise RuntimeError(
                'git rev-parse --show-toplevel exited non-zero: %d' % p.returncode)
        path = p.stdout.readline().strip()
        path = os.path.realpath(path)
        if path.endswith('/.git'):
            path = path[:-5]
        self._repo = repo(None, path)
        return self._repo

class AddRmCommand(Command):
    @classmethod
    def add_subparser(cls, subparsers):
        subparser = super(AddRmCommand, cls).add_subparser(subparsers)
        subparser.add_argument('urls', metavar='<url>', nargs='+',
            help='url(s) to add/remove')
        return subparser

    def __init__(self, args):
        super(AddRmCommand, self).__init__(args)
        self.changed = set()
        self.repos = set(self.repo.remote_repos(self.remote))

    def __call__(self):
        repos = tuple(repo.parse(url) for url in self.args.urls)
        def sync_changes(changed_repos):
            self.changed.update(changed_repos)

            outstanding = set()
            def done(r, _):
                outstanding.remove(r)

            for r in self.changed:
                outstanding.add(r)
                self.change_changee(r, partial(done, r))
            while outstanding: signal.pause()

            for r in self.repos - self.changed:
                outstanding.add(r)
                self.propagate(r, repos, partial(done, r))
            while outstanding: signal.pause()
        self.change(repos, sync_changes)

    def change(self, repos, cb):
        raise NotImplementedError

    def change_changee(self, r, cb):
        raise NotImplementedError

    def propagate(self, r, cb):
        raise NotImplementedError

class AddCommand(AddRmCommand):
    def change(self, repos, cb):
        return self.repo.async_add_repos(self.remote, repos, cb)

    def change_changee(self, r, cb):
        repos = self.repos
        if not self.args.notthis: repos.add(self.repo)
        r.async_add_repos(self.remote, repos, cb)

    def propagate(self, r, repos, cb):
        r.async_add_repos(self.remote, repos, cb)

class RmCommand(AddRmCommand):
    def change(self, repos, cb):
        if self.args.notthis:
            cb(repos)
        else:
            self.repo.async_remove_repos(self.remote, repos, cb)

    def change_changee(self, r, cb):
        r.async_remove_remote(self.remote, cb)

    def propagate(self, r, repos, cb):
        r.async_remove_repos(self.remote, repos, cb)

class SyncCommand(Command):
    def __call__(self):
        relations, visited, outstanding = set(), set(), set()
        def proc(a, bs):
            for b in bs:
                if b not in visited and b != self.repo:
                    visited.add(b)
                    outstanding.add(b)
                    b.get_remote_repos(self.remote, partial(proc, b))
                relations.add((a, b))
            outstanding.remove(a)
        outstanding.add(self.repo)
        self.repo.get_remote_repos(self.remote, partial(proc, self.repo))
        while outstanding: signal.pause()

        a = set((self.repo,)) | visited
        b = visited if self.args.notthis else a
        missing = (rel for rel in product(a, b)
            if rel not in relations and rel[0] != rel[1])

        def add_done(r, added):
            outstanding.remove(r)
        i0 = itemgetter(0)
        for a, rels in groupby(sorted(missing, key=i0), i0):
            repos = sorted(b for _, b in rels)
            print 'Connecting %s -> {%s}' % (a, ', '.join(map(str, repos)))
            outstanding.add(a)
            a.async_add_repos(self.remote, repos, partial(add_done, a))
        while outstanding: signal.pause()

class RunCommand(Command):
    @classmethod
    def add_subparser(cls, subparsers):
        subparser = super(RunCommand, cls).add_subparser(subparsers)
        subparser.add_argument('command', nargs=argparse.REMAINDER,
            help='the command to run')
        return subparser

    def __init__(self, args):
        super(RunCommand, self).__init__(args)
        if not args.command: parser.error('missing command')
        self.repos = [] if self.args.notthis else [self.repo]
        self.repos.extend(self.repo.remote_repos(self.remote))

    def __call__(self):
        return prun_repo_cmds(
            (r, self.args.command, {'shell': True})
            for r in self.repos)

class PushCommand(Command):
    # TODO: support topologies other than star (binary tree would be nice)

    @classmethod
    def add_subparser(cls, subparsers):
        subparser = super(PushCommand, cls).add_subparser(subparsers)
        subparser.add_argument('refspec', metavar='<refspec>', nargs='?',
            help='which refs to push')
        return subparser

    def __call__(self):
        if self.args.refspec:
            cmd = lambda u: ('git', 'push', u, self.args.refspec)
        else:
            cmd = lambda u: ('git', 'push', u)
        repos = self.repo.remote_repos(self.remote)
        prun_repo_cmds(
            (self.repo, cmd(url), {})
            for url in self.repo.relativize_repos(repos))

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--verbose', '-v',
    help='Print verbose output (command run)',
    dest='verbose', action='store_true', default=False)
# TODO: rename this option... what to call a repository which is connected
#       to all clique members, but NOT vice-versa...
parser.add_argument('--not-this',
    help='Don\'t include this repository when propagating to other '
         'repositories or when running commands; useful for repositories '
         'external to the clique.',
    dest='notthis', action='store_true', default=False)
subparsers = parser.add_subparsers()
for cmd in (AddCommand, RmCommand, SyncCommand,
            RunCommand, PushCommand):
    cmd.add_subparser(subparsers)
args = parser.parse_args()
if args.verbose:
    VerboseRun = True
cmd = args.cmd(args)
retcode = cmd()
sys.exit(0 if retcode is None else retcode)
