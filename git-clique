#!/usr/bin/python

import os
import socket
from subprocess import Popen, PIPE
import sys

try:
    from subprocess import check_call
except ImportError:
    from subprocess import call

    # rips from python 2.7 subprocess.py
    class CalledProcessError(Exception):
        def __init__(self, returncode, cmd, output=None):
            self.returncode = returncode
            self.cmd = cmd
            self.output = output
        def __str__(self):
            return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

    def check_call(*popenargs, **kwargs):
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return 0

# from collections import namedtuple
from operator import itemgetter
class repo(tuple): # namedtuple('repo', 'host path')
    def __new__(cls, host, path):
        return tuple.__new__(cls, (host, path))

    host = property(itemgetter(0))
    path = property(itemgetter(1))

    @classmethod
    def parse(cls, s):
        try:
            host, path = s.split(':', 1)
        except ValueError:
            host = None
            path = s
        return cls(host, path)

    def islocal(self):
        return \
            self.host is None or \
            self.host == socket.gethostname() or \
            self.host == socket.getfqdn()

    def add_repos(self, remote, *repos):
        if self.islocal():
            oldcwd = os.getcwd()
            os.chdir(self.path)
            cmd = ['git', 'clique', '--change-only', remote]
            cmd.extend(str(r) for r in repos)
            check_call(cmd)
            os.chdir(oldcwd)

        else:
            cmd = ['ssh', self.host, 'bash', '-c',
                   'cd "$1" && shift && git clique --change-only "$@"',
                   'bash', self.path, remote]
            cmd.extend(str(r) for r in repos)
            check_call(cmd)

    def __str__(self):
        if self.host is None:
            return self.path
        else:
            return self.host + ':' + self.path

def get_remote_urls(remote):
    p = Popen(
        ('git', 'config',  '--get-all', 'remote.' + remote + '.url'),
        stdout=PIPE)
    # if p.wait() != 0: return None
    for line in p.stdout:
        line = line.strip()
        if line: yield line

p = Popen(('git', 'rev-parse', '--show-toplevel'), stdout=PIPE)
if p.wait() != 0:
    raise RuntimeError(
        'git rev-parse --show-toplevel exited non-zero: %d' % p.returncode)
thispath = p.stdout.readline().strip()
thispath = os.path.realpath(thispath)
if thispath.endswith('/.git'):
    thispath = thispath[:-5]

import optparse
parser = optparse.OptionParser()
parser.add_option('--change-only', dest='changeonly', action='store_true', default=False)
parser.add_option('--not-this', dest='notthis', action='store_true', default=False)
opts, args = parser.parse_args()
remote = args.pop(0)

changed = set()
repos = set(repo.parse(url) for url in get_remote_urls(remote))

def add_repo(r):
    if r not in repos:
        if not repos:
            check_call(('git', 'remote', 'add', remote, str(r)))
        else:
            check_call(('git', 'remote', 'set-url', '--add', remote, str(r)))
        repos.add(r)
        return True

for url in args:
    r = repo.parse(url)
    if r.islocal() and os.path.realpath(r.path) == thispath: continue
    if add_repo(r):
        changed.add(r)

if not changed or opts.changeonly: sys.exit(0)

for r in changed:
    if opts.notthis:
        r.add_repos(remote, *repos)
    else:
        if r.islocal():
            thisurl = thispath
        else:
            thisurl = socket.getfqdn() + ':' + thispath
        r.add_repos(remote, thisurl, *repos)

for r in repos - changed:
    r.add_repos(remote, *changed)
